#labels Featured
= Releases roadmap =

== 0.1.0 _(released)_ ==

 * ~~create an asynchronous Python FTP server library compliant with [http://www.faqs.org/rfcs/rfc959.html RFC 959]~~
 
== 0.1.1 _(released)_==

 * ~~randomize PASV port selection~~
 * ~~release pyftpdlib under a license the most freely possible (MIT)~~ 

== 0.2.0 _(the upcoming one)_ ==

RFCs enhancements:
 * ~~understand also TYPE AN and TYPE L8 commands~~
 * ~~accept HELP command arguments~~
 * ~~be compliant with STOU format output as defined into [http://www.faqs.org/rfcs/rfc1123.html RFC 1123]~~
 * return directory listing over the command channel when LIST is provided with an argument
 * change account when USER is provided twice

Security enhancements:
 * ~~provide a way to configure / limit the number of maximum acceptable connections~~
 * ~~provide a way to configure / limit the maximum number of clients which may be connected from the same source internet address~~
 * ~~stop buffering when extremely long lines are received~~
 * ~~rejecting data connection when a privileged port is specified on PORT command~~
 * ~~use a limited number of tries for finding unique filename on STOU~~

Usability enhancements:
 * ~~provide an overridable attribute to easily set number of maximum login attempts before disconnecting~~
 * ~~provide an overridable attribute to easily enable/disable FTP proxying feature~~
 * ~~provide a detailed error messages on connection and file system errors~~

General:
 * ~~remove memory leaks occurring on application exit and on data channel resetting~~
 * correct all bugs / enhancements listed into issues reporting system
 * improve the quality of docstrings and source code comments
 * improve test suite cases
 * write module documentation

== 0.2.1 ==

 * support for FTP servers behind NAT as defined into [http://www.faqs.org/rfcs/rfc2428.html RFC 2428]
 * provide a way to specify / configure a certain range of ports on which data channel should bind on when PASV is received.
 * assume the id of a particular user via os.fork, os.setuid or similar when using system-dependent authorizers.

== 0.x.x ==

 * SSL / TLS support including _AUTH, ADAT, PROT, PBSZ, CCC, MIC, CONF_ and _ENC_ commands as defined into [http://www.faqs.org/rfcs/rfc2228.html RFC 2228]
 * IPv6 support including _EPRT & EPSV_ commands as defined into [http://www.faqs.org/rfcs/rfc2428.html RFC 2428]
 * support for _LANG_ command as defined into [http://www.faqs.org/rfcs/rfc2640.html RFC 2640]
 * implement _MDTM, MLSD, MLST_ commands as defined into [http://www.faqs.org/rfcs/rfc3659.html RFC 3659]
 * implement _FEAT_ and _OPTS_ commands as defined into [http://www.faqs.org/rfcs/rfc2389.html RFC 2389]

= Hosting roadmap =

 * ~~set up a subversion repository~~
 * ~~provide a mailing list / discussion forum for pyftpdlib users~~
 * ~~provide a mailing list for subversion commits~~
 * ~~provide a mailing list for Issue changes~~
 * provide external links related to pyftpdlib (e.g. pyftpdlib port for Free BSD) into the home page
 * provide a _"News"_ section into home page where adding news about the project

= Wiki roadmap =

 * ~~provide a _"RoadMaps"_ wiki including _"Release", "Hosting"_ and _"Wiki"_ roadmap sub-sections~~
 * provide a _"Documentation"_ wiki documenting module itself
 * provide an _"AdvancedUsage"_ wiki describing several advanced usages. In details:
  * system-dependent authorizers
  * logging management
  * adding bandwidth throttling capabilities to asyncore
  * adding asynchronous "sleeps" capabilities to asyncore
  * adding IDLE / Timeout capabilities to pyftpdlib
  * implement a directory listing cache for LIST and NLST commands
 * provide a _"FAQ"_ wiki
 * provide a _"FTPDocs"_ wiki reporting a list of useful protocol-related documents that has been used for pyftpdlib developing.
 * provide a _"BecomeDeveloper"_ wiki explaining pyftpdlib code in depth, showing examples about how to use SVN, how to submit issues and so on...)
 * provide a _"SupportedSystems"_ wiki where show result of test on several systems and python version.